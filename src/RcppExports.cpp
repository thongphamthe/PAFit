// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// generate_net_C_with_count_multi_corrected
int generate_net_C_with_count_multi_corrected(NumericMatrix appear_matrix, NumericMatrix final_matrix, SEXP a_4, SEXP a_5, SEXP a_6, SEXP a_7, SEXP a_8, SEXP a_9, NumericVector& bin_vector, SEXP a_11, SEXP a_12, SEXP a_pa_final, SEXP a_is_directed, SEXP a_M, NumericVector& degree_exist);
RcppExport SEXP _PAFit_generate_net_C_with_count_multi_corrected(SEXP appear_matrixSEXP, SEXP final_matrixSEXP, SEXP a_4SEXP, SEXP a_5SEXP, SEXP a_6SEXP, SEXP a_7SEXP, SEXP a_8SEXP, SEXP a_9SEXP, SEXP bin_vectorSEXP, SEXP a_11SEXP, SEXP a_12SEXP, SEXP a_pa_finalSEXP, SEXP a_is_directedSEXP, SEXP a_MSEXP, SEXP degree_existSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type appear_matrix(appear_matrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type final_matrix(final_matrixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_4(a_4SEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_5(a_5SEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_6(a_6SEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_7(a_7SEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_8(a_8SEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_9(a_9SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bin_vector(bin_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_11(a_11SEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_12(a_12SEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_pa_final(a_pa_finalSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_is_directed(a_is_directedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a_M(a_MSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type degree_exist(degree_existSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_net_C_with_count_multi_corrected(appear_matrix, final_matrix, a_4, a_5, a_6, a_7, a_8, a_9, bin_vector, a_11, a_12, a_pa_final, a_is_directed, a_M, degree_exist));
    return rcpp_result_gen;
END_RCPP
}
// normalized_constant
int normalized_constant(NumericVector& norm, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& f, const NumericMatrix& offset_tk, const double& offset);
RcppExport SEXP _PAFit_normalized_constant(SEXP normSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP fSEXP, SEXP offset_tkSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type norm(normSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type offset_tk(offset_tkSEXP);
    Rcpp::traits::input_parameter< const double& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(normalized_constant(norm, degree, theta, f, offset_tk, offset));
    return rcpp_result_gen;
END_RCPP
}
// normalized_constant_alpha
int normalized_constant_alpha(NumericVector& norm, const double& alpha, const double& PA_offset, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& f, const NumericMatrix& offset_tk, const double& offset);
RcppExport SEXP _PAFit_normalized_constant_alpha(SEXP normSEXP, SEXP alphaSEXP, SEXP PA_offsetSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP fSEXP, SEXP offset_tkSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type norm(normSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type PA_offset(PA_offsetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type offset_tk(offset_tkSEXP);
    Rcpp::traits::input_parameter< const double& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(normalized_constant_alpha(norm, alpha, PA_offset, degree, theta, f, offset_tk, offset));
    return rcpp_result_gen;
END_RCPP
}
// get_stats
int get_stats(CharacterVector& time_stamp, CharacterVector& unique_stamp, const NumericVector& in_node, const NumericVector& out_node, const NumericVector& all_node, const NumericVector& ok_node, const NumericVector& bin_vector, const long max_node_id, const int undirected, const int only_PA, CharacterVector& time_vector, NumericVector& Sum_m_k, NumericMatrix& n_tk, NumericVector& m_tk, NumericVector& m_t, NumericMatrix& offset_tk, NumericVector& z_j, NumericMatrix& node_degree, NumericMatrix& offset_m_tk, const int only_true_deg, const long deg_max, NumericVector& center_bin, NumericVector& appear_time);
RcppExport SEXP _PAFit_get_stats(SEXP time_stampSEXP, SEXP unique_stampSEXP, SEXP in_nodeSEXP, SEXP out_nodeSEXP, SEXP all_nodeSEXP, SEXP ok_nodeSEXP, SEXP bin_vectorSEXP, SEXP max_node_idSEXP, SEXP undirectedSEXP, SEXP only_PASEXP, SEXP time_vectorSEXP, SEXP Sum_m_kSEXP, SEXP n_tkSEXP, SEXP m_tkSEXP, SEXP m_tSEXP, SEXP offset_tkSEXP, SEXP z_jSEXP, SEXP node_degreeSEXP, SEXP offset_m_tkSEXP, SEXP only_true_degSEXP, SEXP deg_maxSEXP, SEXP center_binSEXP, SEXP appear_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type time_stamp(time_stampSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type unique_stamp(unique_stampSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type in_node(in_nodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type out_node(out_nodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type all_node(all_nodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ok_node(ok_nodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bin_vector(bin_vectorSEXP);
    Rcpp::traits::input_parameter< const long >::type max_node_id(max_node_idSEXP);
    Rcpp::traits::input_parameter< const int >::type undirected(undirectedSEXP);
    Rcpp::traits::input_parameter< const int >::type only_PA(only_PASEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type time_vector(time_vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type Sum_m_k(Sum_m_kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type n_tk(n_tkSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type m_tk(m_tkSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type offset_tk(offset_tkSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type z_j(z_jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type node_degree(node_degreeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type offset_m_tk(offset_m_tkSEXP);
    Rcpp::traits::input_parameter< const int >::type only_true_deg(only_true_degSEXP);
    Rcpp::traits::input_parameter< const long >::type deg_max(deg_maxSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type center_bin(center_binSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type appear_time(appear_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_stats(time_stamp, unique_stamp, in_node, out_node, all_node, ok_node, bin_vector, max_node_id, undirected, only_PA, time_vector, Sum_m_k, n_tk, m_tk, m_t, offset_tk, z_j, node_degree, offset_m_tk, only_true_deg, deg_max, center_bin, appear_time));
    return rcpp_result_gen;
END_RCPP
}
// update_f
int update_f(NumericVector& f, const NumericVector& non_zero_f, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& z_j, const NumericVector& normalized_const, const NumericVector& m_t, const double shape, const double rate, const double offset);
RcppExport SEXP _PAFit_update_f(SEXP fSEXP, SEXP non_zero_fSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP z_jSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_f(non_zero_fSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z_j(z_jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const double >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(update_f(f, non_zero_f, degree, theta, z_j, normalized_const, m_t, shape, rate, offset));
    return rcpp_result_gen;
END_RCPP
}
// update_offset
double update_offset(const NumericMatrix& offset_n_tk, const NumericMatrix& offset_m_tk, const NumericVector& theta, const NumericVector& normalized_const, const NumericVector& m_t, const double shape, const double rate);
RcppExport SEXP _PAFit_update_offset(SEXP offset_n_tkSEXP, SEXP offset_m_tkSEXP, SEXP thetaSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type offset_n_tk(offset_n_tkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type offset_m_tk(offset_m_tkSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(update_offset(offset_n_tk, offset_m_tk, theta, normalized_const, m_t, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// update_f_alpha
int update_f_alpha(NumericVector& f, const NumericVector& non_zero_f, const double& alpha, const double& PA_offset, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& z_j, const NumericVector& normalized_const, const NumericVector& m_t, const double shape, const double rate);
RcppExport SEXP _PAFit_update_f_alpha(SEXP fSEXP, SEXP non_zero_fSEXP, SEXP alphaSEXP, SEXP PA_offsetSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP z_jSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_f(non_zero_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type PA_offset(PA_offsetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z_j(z_jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(update_f_alpha(f, non_zero_f, alpha, PA_offset, degree, theta, z_j, normalized_const, m_t, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// update_f_new
int update_f_new(NumericVector& f, const NumericVector& non_zero_f, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& z_j, const NumericVector& normalized_const, const NumericVector& m_t, const double shape, const double rate, const double offset, const NumericVector& weight_f);
RcppExport SEXP _PAFit_update_f_new(SEXP fSEXP, SEXP non_zero_fSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP z_jSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP offsetSEXP, SEXP weight_fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_f(non_zero_fSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z_j(z_jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const double >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight_f(weight_fSEXP);
    rcpp_result_gen = Rcpp::wrap(update_f_new(f, non_zero_f, degree, theta, z_j, normalized_const, m_t, shape, rate, offset, weight_f));
    return rcpp_result_gen;
END_RCPP
}
// update_f_alpha_new
int update_f_alpha_new(NumericVector& f, const NumericVector& non_zero_f, const double& alpha, const double& PA_offset, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& z_j, const NumericVector& normalized_const, const NumericVector& m_t, const double shape, const double rate, const NumericVector& weight_f);
RcppExport SEXP _PAFit_update_f_alpha_new(SEXP fSEXP, SEXP non_zero_fSEXP, SEXP alphaSEXP, SEXP PA_offsetSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP z_jSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP weight_fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_f(non_zero_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type PA_offset(PA_offsetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z_j(z_jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight_f(weight_fSEXP);
    rcpp_result_gen = Rcpp::wrap(update_f_alpha_new(f, non_zero_f, alpha, PA_offset, degree, theta, z_j, normalized_const, m_t, shape, rate, weight_f));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha_fast
double update_alpha_fast(const NumericVector& non_zero_theta, const NumericVector& norm, const NumericVector& f, const double& PA_offset, const NumericVector& theta, const NumericMatrix& degree, const NumericVector& m_t, const NumericVector& Sum_m_k, const NumericMatrix& offset_tk, const double& offset, const double alpha_old);
RcppExport SEXP _PAFit_update_alpha_fast(SEXP non_zero_thetaSEXP, SEXP normSEXP, SEXP fSEXP, SEXP PA_offsetSEXP, SEXP thetaSEXP, SEXP degreeSEXP, SEXP m_tSEXP, SEXP Sum_m_kSEXP, SEXP offset_tkSEXP, SEXP offsetSEXP, SEXP alpha_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_theta(non_zero_thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type norm(normSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const double& >::type PA_offset(PA_offsetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Sum_m_k(Sum_m_kSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type offset_tk(offset_tkSEXP);
    Rcpp::traits::input_parameter< const double& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_old(alpha_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha_fast(non_zero_theta, norm, f, PA_offset, theta, degree, m_t, Sum_m_k, offset_tk, offset, alpha_old));
    return rcpp_result_gen;
END_RCPP
}
// var_alpha
double var_alpha(const double alpha, const NumericVector& non_zero_theta, const NumericVector& norm, const NumericVector& f, const double& PA_offset, const NumericVector& theta, const NumericMatrix& degree, const NumericVector& m_t, const NumericVector& Sum_m_k, const NumericMatrix& offset_tk, const double& offset);
RcppExport SEXP _PAFit_var_alpha(SEXP alphaSEXP, SEXP non_zero_thetaSEXP, SEXP normSEXP, SEXP fSEXP, SEXP PA_offsetSEXP, SEXP thetaSEXP, SEXP degreeSEXP, SEXP m_tSEXP, SEXP Sum_m_kSEXP, SEXP offset_tkSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_theta(non_zero_thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type norm(normSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const double& >::type PA_offset(PA_offsetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Sum_m_k(Sum_m_kSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type offset_tk(offset_tkSEXP);
    Rcpp::traits::input_parameter< const double& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(var_alpha(alpha, non_zero_theta, norm, f, PA_offset, theta, degree, m_t, Sum_m_k, offset_tk, offset));
    return rcpp_result_gen;
END_RCPP
}
// coeff_theta
NumericVector coeff_theta(const NumericMatrix& degree, const NumericVector& f, const NumericVector& normalized_const, const NumericVector& m_t, const int length_theta);
RcppExport SEXP _PAFit_coeff_theta(SEXP degreeSEXP, SEXP fSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP length_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const int >::type length_theta(length_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(coeff_theta(degree, f, normalized_const, m_t, length_theta));
    return rcpp_result_gen;
END_RCPP
}
// coeff_var
NumericVector coeff_var(const NumericMatrix& degree, const NumericVector& f, const NumericVector& normalized_const, const NumericVector& m_t, const NumericMatrix& offset, const int length_theta);
RcppExport SEXP _PAFit_coeff_var(SEXP degreeSEXP, SEXP fSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP offsetSEXP, SEXP length_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type length_theta(length_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(coeff_var(degree, f, normalized_const, m_t, offset, length_theta));
    return rcpp_result_gen;
END_RCPP
}
// cal_var_f
int cal_var_f(NumericVector& cov_f, const NumericVector& non_zero_f, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& f, const NumericVector& z_j, const NumericVector& normalized_const, const NumericVector& m_t, const double shape);
RcppExport SEXP _PAFit_cal_var_f(SEXP cov_fSEXP, SEXP non_zero_fSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP fSEXP, SEXP z_jSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type cov_f(cov_fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_f(non_zero_fSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z_j(z_jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_var_f(cov_f, non_zero_f, degree, theta, f, z_j, normalized_const, m_t, shape));
    return rcpp_result_gen;
END_RCPP
}
// cal_var_f_new
int cal_var_f_new(NumericVector& cov_f, const NumericVector& non_zero_f, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& f, const NumericVector& z_j, const NumericVector& normalized_const, const NumericVector& m_t, const double shape, const NumericVector& weight_f);
RcppExport SEXP _PAFit_cal_var_f_new(SEXP cov_fSEXP, SEXP non_zero_fSEXP, SEXP degreeSEXP, SEXP thetaSEXP, SEXP fSEXP, SEXP z_jSEXP, SEXP normalized_constSEXP, SEXP m_tSEXP, SEXP shapeSEXP, SEXP weight_fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type cov_f(cov_fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type non_zero_f(non_zero_fSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z_j(z_jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type normalized_const(normalized_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_t(m_tSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight_f(weight_fSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_var_f_new(cov_f, non_zero_f, degree, theta, f, z_j, normalized_const, m_t, shape, weight_f));
    return rcpp_result_gen;
END_RCPP
}
